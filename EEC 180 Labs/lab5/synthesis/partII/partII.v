
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module partII(

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

    wire clk;
    wire rstn;
    wire st;
    wire done;
    wire nextState;
    wire properStart;
    wire [3:0] sqrt;
    wire [7:0] mdo;

    reg properReset;
    reg prevState;
    reg [3:0] addr;
    reg [7:0] displayN;

//=======================================================
//  Structural coding
//=======================================================

    always @(posedge clk or negedge rstn)
    begin
        if (~rstn)
        begin
            prevState <= 1'b0;
        end else
        begin
            prevState <= SW[0];
        end
    end

    always @(posedge clk or negedge rstn)
    begin
        if (~rstn)
        begin
            addr <= 4'b0000;
        end else
        begin
            if (properStart)
            begin
                if (addr == 4'b1111)
                begin
                    addr <= 4'b0000;
                end else
                begin
                    addr <= addr + 4'b0001;
                end
            end
        end
    end

    always @(posedge clk or negedge rstn)
    begin
        if (~rstn)
        begin
            displayN <= 8'b0000_0000;
        end else if (properStart)
            displayN <= mdo;
        begin
        end
    end

    always @(posedge clk or negedge rstn)
    begin
        if (~rstn)
        begin
            properReset <= 1'b1;
        end else
        begin
            properReset <= 1'b0;
        end
    end

    ram16x8 ramModule
    (
        .addr(addr),
        .mdi(8'b0000_0000),
        .mwr(1'b0),
        .clk(clk),
        .mdo(mdo)
    );

    squareRoot sqrtModule
    (
        .clk(clk),
        .rstn(rstn),
        .st(st),
        .n(mdo),
        .done(done),
        .sqrt(sqrt)
    );

    hexDisplay upperNibbleDisplay
    (
        .a(displayN[7]),
        .b(displayN[6]),
        .c(displayN[5]),
        .d(displayN[4]),

        .x(HEX2[7:0])
    );

    hexDisplay lowerNibbleDisplay
    (
        .a(displayN[3]),
        .b(displayN[2]),
        .c(displayN[1]),
        .d(displayN[0]),

        .x(HEX1[7:0])
    );

    hexDisplay sqrtDisplay
    (
        .a(sqrt[3]),
        .b(sqrt[2]),
        .c(sqrt[1]),
        .d(sqrt[0]),

        .x(HEX0[7:0])
    );

    assign clk = KEY[0];
    assign rstn = KEY[1];
    assign nextState = ~prevState && SW[0];
    assign properStart = nextState && ~properReset;
    assign st = properStart;

    assign LEDR[0] = done;
    assign HEX3 [7:0] = 8'b1111_1111;
    assign HEX4 [7:0] = 8'b1111_1111;
    assign HEX5 [7:0] = 8'b1111_1111;
endmodule
